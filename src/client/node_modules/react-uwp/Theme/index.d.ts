/// <reference types="react" />
import * as React from "react";
import * as PropTypes from "prop-types";
import getTheme from "../styles/getTheme";
import RenderToBody from "../RenderToBody";
import ToastWrapper from "../Toast/ToastWrapper";
export { getTheme };
export interface DataProps {
    theme?: ReactUWP.ThemeType;
    autoSaveTheme?: boolean;
    themeWillUpdate?: (theme?: ReactUWP.ThemeType) => void;
    onGeneratedAcrylic?: (theme?: ReactUWP.ThemeType) => void;
    needGenerateAcrylic?: boolean;
    scrollBarStyleSelector?: string;
}
export interface ThemeProps extends DataProps, React.HTMLAttributes<HTMLDivElement> {
}
export interface ThemeState {
    currTheme?: ReactUWP.ThemeType;
}
export declare class Theme extends React.Component<ThemeProps, ThemeState> {
    static defaultProps: ThemeProps;
    static childContextTypes: {
        theme: PropTypes.Requireable<any>;
    };
    acrylicTextureCount: number;
    themeClassName: string;
    cacheDarkAcrylicTextures: ReactUWP.ThemeType;
    cacheLightAcrylicTextures: ReactUWP.ThemeType;
    toastWrapper: ToastWrapper;
    prevStyleManager: ReactUWP.StyleManager;
    backgroundEl: RenderToBody;
    getDefaultTheme: () => ReactUWP.ThemeType;
    getLocalStorageTheme: () => ReactUWP.ThemeType;
    bindNewThemeMethods: (theme: ReactUWP.ThemeType) => void;
    handleNewTheme: (theme: ReactUWP.ThemeType) => void;
    state: ThemeState;
    getChildContext: () => {
        theme: ReactUWP.ThemeType;
    };
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: ThemeProps): void;
    componentWillUpdate(nextProps: ThemeProps, nextState: ThemeState): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    updateTheme: (newTheme?: ReactUWP.ThemeType, callback?: (theme?: ReactUWP.ThemeType) => void) => void;
    forceUpdateTheme: (currTheme: ReactUWP.ThemeType) => void;
    saveTheme: (currTheme: ReactUWP.ThemeType) => void;
    sureNeedGenerateAcrylic: (newTheme: ReactUWP.ThemeType) => boolean;
    findToastNodeTimers: any[];
    toastId: number;
    addToast: (toast: React.ReactElement<any>, callback?: (toastId?: number) => void, increaseId?: boolean, currToastId?: number) => void;
    updateToast: (toastId: number, toast: React.ReactElement<any>) => void;
    deleteToast: (toastId: number) => void;
    handleScrollReveal: (e?: Event) => void;
    cleanLocalStorage: () => void;
    render(): JSX.Element;
}
export default Theme;
