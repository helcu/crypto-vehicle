/// <reference types="react" />
import * as React from "react";
import * as PropTypes from "prop-types";
export interface DataProps {
    displayMode?: "default" | "minimum" | "reset";
    showControl?: boolean;
    url?: string;
    width?: number;
    height?: number;
    playing?: boolean;
    loop?: boolean;
    controls?: boolean;
    volume?: number;
    playbackRate?: number;
    progressFrequency?: number;
    soundcloudConfig?: {
        clientId: string;
        showArtwork: boolean;
    };
    youtubeConfig?: {
        playerVars: Object;
        preload: boolean;
    };
    vimeoConfig?: {
        iframeParams: Object;
        preload: boolean;
    };
    fileConfig?: {
        attributes: Object;
    };
    onReady?: React.ReactEventHandler<HTMLDivElement>;
    onStart?: React.ReactEventHandler<HTMLDivElement>;
    onPlay?: React.ReactEventHandler<HTMLDivElement>;
    onPause?: React.ReactEventHandler<HTMLDivElement>;
    onBuffer?: React.ReactEventHandler<HTMLDivElement>;
    onEnded?: React.ReactEventHandler<HTMLDivElement>;
    onError?: React.ReactEventHandler<HTMLDivElement>;
    onDuration?: React.ReactEventHandler<HTMLDivElement>;
    onProgress?: React.ReactEventHandler<HTMLDivElement>;
    className?: string;
    style?: React.CSSProperties;
    onTouchStart?: React.ReactEventHandler<HTMLDivElement>;
    onMouseEnter?: React.ReactEventHandler<HTMLDivElement>;
    onMouseLeave?: React.ReactEventHandler<HTMLDivElement>;
    onMouseMove?: React.ReactEventHandler<HTMLDivElement>;
}
export interface MediaPlayerProps extends DataProps {
}
export interface MediaPlayerState {
    currShowControl?: boolean;
    currPlaying?: boolean;
    currVolume?: number;
    currPlayed?: number;
    currLoaded?: number;
    currPlaybackRate?: number;
    fullScreenMode?: boolean;
    duration?: number;
    played?: number;
    loaded?: number;
}
export declare class MediaPlayer extends React.Component<MediaPlayerProps, MediaPlayerState> {
    static defaultProps: MediaPlayerProps;
    getProps2State: (props: MediaPlayerProps) => MediaPlayerState;
    state: MediaPlayerState;
    componentWillReceiveProps(nextProps: MediaPlayerProps): void;
    rootElm: HTMLDivElement;
    showControlTimer: any;
    mouseMoveTimer: any;
    endTimer: any;
    reactPlayer: any;
    static contextTypes: {
        theme: PropTypes.Requireable<any>;
    };
    context: {
        theme: ReactUWP.ThemeType;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillUpdate(): void;
    handleMouseEnter: (e?: React.MouseEvent<HTMLDivElement>) => void;
    handleMouseLeave: (e?: React.MouseEvent<HTMLDivElement>) => void;
    handleMouseMove: (e?: React.MouseEvent<HTMLDivElement>) => void;
    handleTouchStart: (e?: React.TouchEvent<HTMLDivElement>) => void;
    toggleShowControl: (currShowControl?: any) => void;
    togglePlaying: (currPlaying?: any) => void;
    handleFullScreenAction: () => void;
    existFullscreen: () => void;
    handleKeyDown: (e: KeyboardEvent) => void;
    exitFullScreen: () => void;
    handleEnded: () => void;
    render(): JSX.Element;
}
export default MediaPlayer;
