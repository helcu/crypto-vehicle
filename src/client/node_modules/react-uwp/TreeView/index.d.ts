/// <reference types="react" />
import * as React from "react";
import * as PropTypes from "prop-types";
export interface TreeItem {
    title?: string;
    titleNode?: React.ReactNode;
    disabled?: boolean;
    visited?: boolean;
    expanded?: boolean;
    focus?: boolean;
    hidden?: boolean;
    children?: TreeItem[];
    style?: React.CSSProperties;
    hoverStyle?: React.CSSProperties;
    onClick?: (e: MouseEvent) => void;
}
export interface DataProps {
    listSource?: TreeItem[] | string[];
    iconDirection?: "left" | "right";
    itemHeight?: number;
    itemPadding?: number;
    iconPadding?: number;
    onChooseTreeItem?: (listItem: TreeItem) => void;
    headerIcon?: React.ReactNode;
    itemIcon?: React.ReactNode;
    background?: string;
    showFocus?: boolean;
}
export interface TreeViewProps extends DataProps, React.HTMLAttributes<HTMLDivElement> {
}
export interface TreeViewState {
    init?: boolean;
    chooseTreeItem?: TreeItem;
}
export declare class TreeView extends React.Component<TreeViewProps, TreeViewState> {
    static defaultProps: TreeViewProps;
    state: TreeViewState;
    static contextTypes: {
        theme: PropTypes.Requireable<any>;
    };
    context: {
        theme: ReactUWP.ThemeType;
    };
    setChooseItem: (chooseTreeItem: TreeItem) => void;
    renderTree: () => React.ReactNode;
    render(): JSX.Element;
}
export default TreeView;
